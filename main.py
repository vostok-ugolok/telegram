from telebot import *
from associations import *
import os
from threading import Thread
import requests
import json
import socketio
import socketio.exceptions

host = "185.246.64.64:4999"
client_bot = TeleBot(token=os.environ["VOSTOK_UGOLOK_TOKEN"])
client_bot.parse_mode = 'html'

order_to_user = Associations()
sio = socketio.Client()
owner = '399445674'

try:
    sio.connect('ws://' + host)

except socketio.exceptions.ConnectionError:
    client_bot.send_message(owner, 'üî•  –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É! –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω')
    exit()

@client_bot.message_handler(commands=['start'])
def start(message):
    args = message.text.split()[1:]
    if args != []:
        order_id = args[0]

        order = requests.get('http://' + host + f'/order/get?id={order_id}').json()[0]

        name = order['name']
        phone = order['phone']
        adress = order['adress']
        creation_time = order['creation_time']

        if adress in ('', 'cass', 'inside'):
            order_to_user.assoc_add(order, message.from_user.id)
            order_to_user.save()

            client_bot.send_message(message.from_user.id, f"""<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b>
                             
üìç  –í—ã–±—Ä–∞–Ω –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä <b>{order_id}</b>

üë®üèª  –ò–º—è: <b>{name}</b>

üìû  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone}</b>

‚ö°  –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞—Ñ–µ –≤ <b>{''.join(creation_time.split()[1][:-3])}</b>
–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤""")
            
        else:
            client_bot.send_message(message.from_user.id, f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å!
–í—ã–±—Ä–∞–Ω–Ω—ã–π –í–∞–º–∏ –∑–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {order_id} –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞
–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ""")

@sio.on('ORDER STATE CHANGED')
def on_order_ready(id_state: list):
    order_id = id_state[0]
    order_state = id_state[1]
    order_addinfo = None

    if (len(id_state) > 2):
        order_addinfo = id_state[2]

    if order_state == 'READY':
        for uid in order_to_user.data[order_id]:
            client_bot.send_message(uid, f'üïí –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!\n \n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>')
    
    elif order_addinfo != None:
        for uid in order_to_user.data[order_id]:
            client_bot.send_message(uid, f'‚ö† –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É\n \n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_id}</b>\n\n{order_addinfo}')

@sio.on('connection')
def connected():
    client_bot.send_message(owner, '‚úÖ  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

if __name__ == '__main__':
    print('‚ö°  –ë–æ—Ç-–∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')
    
    client_bot.infinity_polling()